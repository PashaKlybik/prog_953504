							Техническое задание
Проект «Атлант-М»
Разработал Пристром Д.Е., гр. 953504

ОБЩЕЕ ОПИСАНИЕ
Программное обеспечение предназначено для управления данными в процессе товароборота автомобилей холдинга «Атлант-М». Под управлением
подразумевается гибкая система добавления/удаления данных, чтения/записи из файла и обработка заказов клиентов.

Целевая аудитория - люди среднего возраста, преимущественно бухгалтеры и менеджеры. Предполагаемый уровень компьютерный грамотности
определил оптимальный вариант пользовательского интерфейса (текстовый консольный). Язык интерфейса - международный английский, так как упор сделан
на зарубежные филиалы автомобильного холдинга.

АРХИТЕКТУРА
1) Главное меню. (main.c)
	- Cars. Открывает ветвь программы, предназначенную для работы с базой данных автомобилей.
	- Consumers. Открывает ветвь программы, предназначенную для работы с базой данных клиентов.
	- About software. Описание продукта.
	- Exit. Выход из программы с предварительным подтверждением.
2) Сars. (модуль cars_menu.h)
	- View database. Просмотр текущего состояния базы данных с функциями сортировки автомобилей по году выпуска и цене.
	- Load from file. Загрузка данных из файла кастомного расширения .CAR
	- Dump to file. Выгрузка данных в файл кастомного расширения .CAR
	- Add new data. Добавление новой информации в базу данных.
	- Remove existing data. Удаление уже существующой информации из базы данных.
	- Search. Поиск по базе данных, выбирая фильтром любое из полей.
	- Make order for new car. Функция заказа у зарубежного поставщика автомобиля с расчётом расходов компании. Реализована функция помощи, 
			          описывающая алгоритм финансовых выичлений.
	- Show statistics. Отображение количества проданных/заказанных автомобилей и общего дохода компании.
3) Consumers. (модуль consumers_menu.h)
	- View database. Просмотр текущего состояния базы данных клиентов.
	- Load from file. Загрузка данных из файла кастомного расширения .CON
	- Dump to file. Выгрузка данных в файл кастомного расширения .CON
	- Add new data. Добавление новой информации в базу данных.
	- Remove existing data. Удаление уже существующой информации из базы данных.
	- Select car. Подбор необходимого автомобиля согласно заказу клиента.
	- Make order. Обработка заказа клиентов.
	- Search. Поиск по базе данных, выбирая фильтром любое из полей за исключением поля REQUEST, которое является отдельной структурой.

СТРУКТУРА ДАННЫХ.
1) Общее. (модуль cars.h)
	- Перечисление, содержащее все поля баз данных.
	enum Fields { MODEL, STATE, YEAR, ENGINE_CAPACITY, MILEAGE, POWER, PRICE,
              	      NAME, CONTACTS, FINANCES };

	- Тип, представляющий поле отдельное поле базы данных.
	typedef int Field;

2) База данных автомобилей. (модуль cars.h)
	- Перечисление, описывающее два состояния автомобиля.
	enum States { NEW, USED };
	
	- Тип, представляющий состояние автомобиля.
	typedef int State;

	- Структура для хранения данных отдельного автомобиля.
	typedef struct
	{
	    char model[20];
	    State state;
	    int year;
	    int engine_capacity; //в кубических сантиметрах
	    int mileage; //в километрах
	    int power; //в лошадиных силах
	    float price; //в евро
	} CarUnit;

	- Структура, представляющая узел двунаправленного списка структур CarListNode.
	struct CarListNode
	{
	    CarUnit value;
	    struct CarListNode *prev;
	    struct CarListNode *next;
	};

	- Структура-контейнер, представляющая двунаправленний список структур CarListNode.
	typedef struct
	{
	    struct CarListNode *first;
	    struct CarListNode *last;
	    int size; //размер списка
	    int sold; //кол-во проданных автомобиля
	    int obtained; //кол-во заказанных из-за рубежа автомобилей
	    float income; //общий доход компании
	} CarList;

3) База данных клиентов. (модуль consumers.h)
	- Структура для хранения данных отдельного клиента.
	typedef struct
	{
	    char name[100];
	    int contacts;
	    CarUnit *request; // запрос пользователя, на момент добавления в список поле равно NULL
	    float finances; //в евро
	} Consumer;
	
	- Структура, представляющая узел двунаправленного списка структур ConsumerListNode.
	struct ConsumerListNode
	{
	    Consumer value;
	    struct ConsumerListNode *prev;
	    struct ConsumerListNode *next;
	};

	- Структура-контейнер, представляющая двунаправленний список структур ConsumerListNode.
	typedef struct
	{
	    struct ConsumerListNode *first;
	    struct ConsumerListNode *last;
	    int size;
	} ConsumerList;

СИСТЕМНЫЕ ТРЕБОВАНИЯ.
OS: Microsoft Windows 10
RAM: 16 MB
DISK SPACE: 360 KB
